#!/usr/bin/env bash
# SPDX-License-Identifer: MIT
#
# rofi-session - a Session menu for Rofi
#
# homepage: https://github.com/nullxception/dotfiles
# based on: https://github.com/jluttine/rofi-power-menu
#

rf_item() {
    local text="$2"
    local item="$text"
    if [ "$icon" = "font" ]; then
        item="\u200e$1"
        if [ "$label" = "true" ]; then
            item+=" \u2068$text\u2069"
        fi
    else
        item="\u200e"
        if [ "$label" = "true" ]; then
            item+="$text"
        fi
    fi
    printf "$item"
}

rf_opt() {
    local prop=''
    for i in "$@"; do
        if [ -z "$prop" ]; then
            prop+="\0$i"
        else
            prop+="\x1f$i"
        fi
    done
    printf "$prop\n"
}

get_icon() {
    case "$icon" in
    "font")
        printf "${icon[$1]#*,}" | xargs
        ;;
    "true")
        printf "${icon[$1]%,*}" | xargs
        ;;
    *)
        printf ""
        ;;
    esac
}

default_choices() {
    rf_opt prompt "Session Menu"
    for i in "${displayed_choices[@]}"; do
        rf_item "$(get_icon $i)" "${label[$i]}"
        rf_opt icon "$(get_icon $i)" info "action:$i"
    done
    exit 0
}

prompt_choice() {
    local choice="$1"
    for i in "${need_prompt[@]}"; do
        if [[ "$choice" == "$i" ]]; then
            rf_opt prompt "Are you sure ?"

            rf_item "$(get_icon $choice)" "Yes, ${label[$choice]}"
            rf_opt icon "$(get_icon $choice)" info "prompt:$choice"

            rf_item "$(get_icon back)" "Go back"
            rf_opt icon "$(get_icon back)" info "prompt:back"

            exit 0
        else
            act="prompt:$choice"
        fi
    done
}

dispatch_action() {
    local key="${1#*:}"
    if [[ "$key" == "back" ]]; then
        default_choices
    else
        eval "${action[$key]}" &
        disown
        exit 0
    fi
}

proceed_choices() {
    for i in "${displayed_choices[@]}"; do
        if [[ $act == "action:$i" ]]; then
            prompt_choice "$i"
        fi

        if [[ "$act" == "prompt:"* ]]; then
            dispatch_action "$act"
        fi
    done
}

gen_config() {
    local conf="$1"
    mkdir -p "$(dirname "$(realpath "$conf")")"
    printf -v list_choices '%s:' "${displayed_choices[@]}"

    cat <<EOF >"$conf"
#
# rofi-session configuration
#

# icon=$icon
# choices=${list_choices%:}
# label=$label
# theme=/path/to/theme.rasi

EOF
}

usage() {
    local name="$(basename "$0")"
    cat <<EOF
$name - a Session menu for Rofi

Usage:
  $name [options] -- [rofi args]
  rofi -show foo -modi "foo:$name [options]"

Example:

  $name -l false -c logout:shutdown -- -theme ~/.config/rofi/theme/cherry.rasi

or use as rofi modi:

  rofi -show foo -modi "foo:$name -l false -c logout:shutdown" -theme ~/.config/rofi/theme/cherry.rasi

Available options:

  -c, --choices CHOICES         Filter choices to display, use ":" as the separator.
                                Available choices:
                                lockscreen:logout:suspend:hibernate:reboot:shutdown

                                By default, all available choices will be shown.

  -i, --icon  true|font|false   Enable or disable icon for the choices.
                                Use --icon=font if you want to use a symbols from
                                your font instead of desktop icon pack (requires
                                nerd-patched font).

  -l, --label true|false        Enable or disable label for the choices.

  -h,--help                     Show this help text.

Configuration

    $name will source variables from $sessionconf if exists.
    Valid variables are :

    icon=true|font|false
    choices=CHOICES
    label=true|false
    theme=/path/to/theme.rasi

    For "theme" variable, it'll only be used when -m or --as-modi is not used.

EOF
}

build_session_args() {
    local args=""
    if [ -n "$choices" ]; then
        args+=" --choices=$choices"
    fi
    if [ -n "$icon" ]; then
        args+=" --icon=$icon"
    fi
    if [ -n "$label" ]; then
        args+=" --label=$label"
    fi
    echo "$args"
}

build_rofi_args() {
    local args=""
    local skip=0
    for arg in $@; do
        if [ $skip -gt 0 ]; then
            skip=$((skip - 1))
            continue
        fi

        case $arg in
        -show | -modi)
            skip=1
            ;;
        *)
            args+=" $arg"
            ;;
        esac
    done

    if [ -f "$theme" ]; then
        args+=" -theme $theme"
    fi

    echo $args
}

declare -A label
label[lockscreen]="Lock screen"
label[logout]="Logout"
label[suspend]="Suspend"
label[hibernate]="Hibernate"
label[reboot]="Reboot"
label[shutdown]="Shut down"

declare -A icon
icon[lockscreen]="system-lock-screen-symbolic, "
icon[logout]="system-log-out-symbolic, 󰿅"
icon[suspend]="system-suspend-symbolic, 󰒲"
icon[hibernate]="system-hibernate-symbolic, "
icon[reboot]="system-reboot-symbolic, 󰜉"
icon[shutdown]="system-shutdown-symbolic, 󰐥"
icon[back]="go-previous-symbolic, 󰕍"

declare -A action
action[lockscreen]="loginctl lock-session ${XDG_SESSION_ID-}"
action[logout]="loginctl kill-session ${XDG_SESSION_ID-}"
action[suspend]="systemctl suspend"
action[hibernate]="systemctl hibernate"
action[reboot]="systemctl reboot"
action[shutdown]="systemctl poweroff"

# Supported choices, use --choices instead if you want to filters it
displayed_choices=(lockscreen logout suspend hibernate reboot shutdown)
need_prompt=(logout reboot shutdown)
icon=true
label=true

parsed=$(getopt --options=hsc:i:l: --longoptions=help,show,choices:,icon:,label:,config: --name "$0" -- "$@")
if [ $? -ne 0 ]; then
    echo 'Invalid argument, exiting.' >&2
    exit 1
fi

eval set -- "$parsed"
unset parsed

while true; do
    case "$1" in
    -h | --help)
        usage
        exit
        ;;
    -c | --choices)
        arg_choices="$2"
        shift 2
        ;;
    -i | --icon)
        arg_icon="$2"
        shift 2
        ;;
    -l | --label)
        arg_label="$2"
        shift 2
        ;;
    --config)
        arg_conf="$2"
        shift 2
        ;;
    --)
        shift
        break
        ;;
    esac
done

confdir="${XDG_CONFIG_HOME:-$HOME/.config}/rofi"
sessionconf="${arg_conf:-${confdir}/rofi-session.conf}"

if [ ! -f "${sessionconf}" ]; then
    gen_config "$sessionconf"
fi

. $sessionconf

choices="${arg_choices:-$choices}"
label="${arg_label:-$label}"
icon="${arg_icon:-$icon}"

if [ -z "$ROFI_OUTSIDE" ]; then
    rofi -show session -modi "session:$0 $(build_session_args)" $(build_rofi_args $@)
    exit
fi

act="$ROFI_INFO"
rf_opt no-custom true
rf_opt markup-rows true

if [ -n "$choices" ]; then
    IFS=':' read -ra displayed_choices <<<"$choices"
fi

if [ -z "$act" ]; then
    default_choices
else
    proceed_choices
fi
